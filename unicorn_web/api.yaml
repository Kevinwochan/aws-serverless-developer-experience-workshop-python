openapi: "3.0.1"
info:
  title: "Unicorn Web API"
  version: "1.0.0"
  description: Unicorn Properties Web Service API
paths:
  /request_approval:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PublicationEvaluationRequestModel"
        required: true
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-request-validator: "Validate body"
      x-amazon-apigateway-integration:
        credentials:
          Fn::GetAtt: [UnicornWebApiIntegrationRole, Arn]
        httpMethod: "POST"
        uri:
          "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:sqs:path/${AWS::AccountId}/${UnicornWebIngestQueue.QueueName}"
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json: '{"message":"OK"}'
        requestParameters:
          integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
        requestTemplates:
          application/json: "Action=SendMessage&MessageBody=$input.body&MessageAttribute.1.Name=HttpMethod&MessageAttribute.1.Value.StringValue=$context.httpMethod&MessageAttribute.1.Value.DataType=String"
        passthroughBehavior: "never"
        type: "aws"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: "when_no_match"
        type: "mock"
  /search/{country}/{city}:
    get:
      parameters:
        - name: "country"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "city"
          in: "path"
          required: true
          schema:
            type: "string"
      x-amazon-apigateway-integration:
        credentials:
          Fn::GetAtt: [UnicornWebApiIntegrationRole, Arn]
        httpMethod: "POST"
        uri:
          "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchFunction.Arn}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: "when_no_match"
        type: "mock"
  /search/{country}/{city}/{street}:
    get:
      parameters:
        - name: "street"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "country"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "city"
          in: "path"
          required: true
          schema:
            type: "string"
      x-amazon-apigateway-integration:
        credentials:
          Fn::GetAtt: [UnicornWebApiIntegrationRole, Arn]
        httpMethod: "POST"
        uri:
          "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: "when_no_match"
        type: "mock"
components:
  schemas:
    PublicationEvaluationRequestModel:
      required:
        - "property_id"
      type: "object"
      properties:
        property_id:
          type: "string"
    PublicationEvaluationResponseModel:
      required:
        - "result"
      type: "object"
      properties:
        result:
          type: "string"
    Empty:
      title: "Empty Schema"
      type: "object"